#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <iostream>
#include <thread>
#include <chrono>
#include <cmath>
#include <vector>

// Constants
const float AutoAttackRange = 550.0f;
const float SkillRange = 800.0f;
const float MinionRange = 400.0f;

// Global variables
bool showAutoAttackRange = true;
bool showSkillRange = true;
bool rageMode = true;

struct Vector2 {
    float x;
    float y;
};

// Function to predict enemy position
Vector2 PredictPosition(Vector2 position, Vector2 velocity, float time) {
    Vector2 predictedPosition;
    predictedPosition.x = position.x + velocity.x * time;
    predictedPosition.y = position.y + velocity.y * time;
    return predictedPosition;
}

// Function to draw a circle
void DrawCircle(sf::RenderWindow& window, Vector2 position, float radius, sf::Color color) {
    sf::CircleShape circle(radius);
    circle.setFillColor(sf::Color::Transparent);
    circle.setOutlineColor(color);
    circle.setOutlineThickness(2);
    circle.setPosition(position.x - radius, position.y - radius);
    window.draw(circle);
}

int main() {
    // Create a window
    sf::RenderWindow window(sf::VideoMode(1024, 768), "Game Simulation");

    // Main game loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Space) {
                    // Simulate using ability
                    std::cout << "Using ability!" << std::endl;

                    // Simulate prediction
                    Vector2 enemyPosition = { 1000.0f, 500.0f };
                    Vector2 enemyVelocity = { -100.0f, 0.0f };

                    Vector2 predictedPosition = PredictPosition(enemyPosition, enemyVelocity, 1.0f);
                    std::cout << "Predicted position: (" << predictedPosition.x << ", " << predictedPosition.y << ")" << std::endl;
                }

                if (event.key.code == sf::Keyboard::R) {
                    rageMode = true;
                    std::cout << "Rage Mode activated!" << std::endl;
                }
                if (event.key.code == sf::Keyboard::L) {
                    rageMode = false;
                    std::cout << "Legit Mode activated!" << std::endl;
                }

                if (event.key.code == sf::Keyboard::C) {
                    std::cout << "Clearing minions!" << std::endl;
                    std::vector<Vector2> minionPositions = { { 600.0f, 450.0f }, { 650.0f, 470.0f }, { 700.0f, 490.0f } };

                    for (auto& minion : minionPositions) {
                        float distance = std::sqrt(std::pow(minion.x - 500.0f, 2) + std::pow(minion.y - 500.0f, 2));
                        if (distance <= MinionRange) {
                            std::cout << "Using ability on minion at (" << minion.x << ", " << minion.y << ")" << std::endl;
                        }
                    }
                }
            }
        }

        // Clear the window
        window.clear();

        // Drawing overlays
        if (showAutoAttackRange) {
            DrawCircle(window, { 500.0f, 500.0f }, AutoAttackRange, sf::Color::Red);
        }
        if (showSkillRange) {
            DrawCircle(window, { 500.0f, 500.0f }, SkillRange, sf::Color::Blue);
        }

        // Display what has been drawn
        window.display();

        // Simulated game loop delay
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    return 0;
}
